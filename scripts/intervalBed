#!/usr/bin/awk -f
#
# Copyright (c) 2012, 2013, 2015 Douglas G. Scofield, Uppsala University
# douglasgscofield@gmail.com
#
# No warranty is implied or assumed by this code.  Please send bugs, suggestions etc.
#
# Say you have a data stream (the header line is optional) with the
# following format:
#
#     REF         POS VAL
#     reference1  1   0
#     reference1  2   1
#     reference1  3   1
#     reference1  4   1
#     reference1  5   1
#     reference1  6   1
#     reference1  7   1
#     reference1  8   1
#     reference1  9   0
#     reference1  10  0
#     reference1  11  1
#     reference1  12  1
#     reference1  13  1
#     reference1  14  0
#     reference1  15  0
#     reference1  16  0
#     ...
#
# This script will encode each stretch of 1s in the 3rd column into a BED
# interval, for example the above input would result in a BED containing
# the following lines:
#
#     track name=intervalBed description="intervals of positions with 1s"
#     reference1  1   8
#     reference1  10  13
#
# With the option col=0, no column of boolean values is required, as
# 'true' is implied for each position present on input
#
# Note that intervals in BED are 0-based and [begin, end).  The script
# assumes that input positions are 1-based.  The script also assumes that
# positions not represented in the input have values of 0.
#
# Optionally, a grace distance may be defined such that stretches that are
# separated by less than or equal to the grace distance will be annotated
# as if they are connected.  For the above dataset, a grace greater than or
# equal to 2 will result in a single annotation line:
#
#     track name=intervalBed description="intervals of positions with 1s, grace distance 2"
#     reference1  1   13
#
# while a grace of 1 will not connect the stretches.  Grace distances
# also may apply across positions not represented in the input.  Grace
# only extends to intervals within the current reference.  Grace will only
# connect identifiable intervals and will never implicitly include the
# beginning or end of references.
#
# All options, change with option=value on command line:
#
# col          : the column we are checking, note col=0 description above
# crit_val     : the value against which we are checking, if the value in col
#                is equal to or above this, we include the position in output.
#                Default is crit_val=1.
# strict       : if strict=1, then we must match crit_val exactly, otherwise
#                greater than or equal to crit_val
# FS, OFS      : input and output field separator characters (default "\t")
# header       : number of header lines on input (default 1)
# skip_comment : skip comment lines beginning with '#' (default 1, 'true')
# grace        : intervals separated by this much will be merged (default 0)
# min_width    : minimum width of an interval to produce (default 1)
# track        : print an initial track line on output? (default 1, 'true')
# trackname    : the value of 'name=' on the track line, default 'intervalBed'
# trackdesc    : the value of 'description=' on the track line, default set
#                from option values
#
# CHANGELOG
# 2015-02-27 : val_col to val, add strict
# 2015-02-06 : minor comment tweaks
# 2013-06-06 : support col=0 and improve documentation
# 2012-12-01 : handle comments and blank lines
# 2012-11-30 : minimum width interval
# 2012-11-27 : create the script
#
# TODO
# --- implement an inverse, connecting stretches of 0s rather than 1s,
#     where grace still applies and undefined positions on the input are
#     still assumed to be 0
# --- handle command-line arguments?  turns out all that is needed is
#     to specify key=value pairs on the command line to override any
#     of what is set (at least) in BEGIN ... how easy!  i'll just recommend
#     using that

BEGIN {
    # parameters
    FS = "\t";    # input column separator
    OFS = "\t";   # output column separator
    header = 1;   # do we have header line(s) on the input to skip?
    skip_comment = 1; # do we skip comments, lines that begin with '#'?
    grace = 0;    # set to grace distance
    min_width = 1;  # minimum interval width to print
    inverse = 0;  # connect 0-valued intervals instead of 1-valued intervals; UNIMPLEMENTED
    track = 1;  # do we print an initial track line on the output?
    trackname = "intervalBed";
    # trackdesc = ;  # default is set later, set it on the command line to override
    strict = 0;  # are we strict about our match against crit_val (== ?)
    crit_val = 1; # what val must we have in col for interval determination?
    col = 3;  # column of critical values across positions within references

    # parameters but probably of less interest
    ref_col = 1;  # column of reference, starting with 1 by awk convention
    pos_col = 2;  # column of position within reference (increasing within each reference)
    ref_start_pos = 1; # the position at which input positions start
    out_start_pos = 0; # the position at which output positions start


    # operational variables
    out_adjust = out_start_pos - ref_start_pos;  # diff between calculated pos and output pos
    ref = "";     # current reference
    pos = -1;     # current position
    val = -1;     # current value
    ibegin = -1;  # beginning of the current interval
    iend = 0;     # the position immediately beyond the current interval
    # didja notice? the current interval is [ibegin, iend)
    in_grace = 0; # counts the positions of grace we've been given
}


# print out interval taking into account the position adjustment

function print_interval(r, ib, ie)
{
    if ((ie - ib) >= min_width) {
        print r, (ib + out_adjust), (ie + out_adjust);
    }
}

{
    if (header && NR <= header) {
        next;
    }
    if (skip_comment && $0 ~ /^#/) {
        next;
    }
    if ($0 ~ /^$/) {  # blank lines
        next;
    }
    if (col == 0) {
        crit_val = 1;
        strict = 0;
    }

    if (ibegin == -1) {  # initializing...
        ref = $(ref_col);
        pos = $(pos_col);
        val = (col == 0 ? 1 : $(col));
        ibegin = (val == crit_val) ? pos : 0;
        iend = ibegin + 1;
        if (track) {
            if (! trackdesc) {
                if (col == 0)
                    trackdesc = "intervals including all positions";
                else {
                    if (strict == 1)
                        trackdesc = "intervals of column " col " equal to " crit_val;
                    else
                        trackdesc = "intervals of column " col " greater than or equal to " crit_val;
                }
                if (grace > 0)
                    trackdesc = trackdesc ", grace distance " grace;
                if (min_width > 1)
                    trackdesc = trackdesc ", minimum width " min_width;
            }
            print "track name=\"" trackname "\" description=\"" trackdesc "\"";
        }

        next;
    }

    if ($(ref_col) != ref) {  # new reference seen
        if (ibegin) {  # we were working on an interval, ignore any grace
            print_interval(ref, ibegin, iend);
            ibegin = 0;
            if (grace)
                in_grace = 0;
        }
        ref = $(ref_col);
    }

    pos = $(pos_col);
    val = (col == 0 ? 1 : $(col));

    if (ibegin) {  # working on an interval
        if (val == crit_val || (! strict && val > crit_val)) {
            if (pos == iend) { # we did not skip positions
                if (grace && in_grace) {  # use the grace we've been given
                    iend += in_grace;
                    in_grace = 0;
                }
                ++iend;
            } else if (pos > iend && grace && pos - iend <= grace) {
                # we skipped positions on input, they were within the grace we
                # have; note that in_grace is ignored since iend holds what we
                # need
                iend = pos + 1;
                in_grace = 0;
            } else {  # we skipped positions and have no grace, print current
                      # interval and start a new one
                print_interval(ref, ibegin, iend);
                ibegin = pos;
                iend = ibegin + 1;
            }
        } else if (grace && ++in_grace <= grace) {
            # noop; keep moving until no more grace
        } else {  # not crit_val and no grace left, print interval and reset
            print_interval(ref, ibegin, iend);
            ibegin = 0;
            if (grace)
                in_grace = 0;
        }
    } else if (val == crit_val || (! strict && val > crit_val)) {  # begin an interval
        ibegin = pos;
        iend = ibegin + 1;
    }
}

END {
    if (ibegin) { # wrap up current interval, ignore any grace
        print_interval(ref, ibegin, iend);
    }
}

